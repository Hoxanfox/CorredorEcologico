version: '3.8'

services:
  # Servicio para el primer Frontend (React con TypeScript)
  frontend1:
    build:
      context: ./Frontend/HU-1-2-3
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    networks:
      - app-network
    depends_on:
      - app  # ← Cambiado de backend a app

  # Servicio para el segundo Frontend (React con TypeScript)
  frontend2:
    build:
      context: ./Frontend/HU-4-5-6
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    networks:
      - app-network
    depends_on:
      - app  # ← Cambiado de backend a app

  db:
    image: postgres:15
    container_name: postgres_sendero
    environment:
      POSTGRES_DB: prubb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build:
      context: ./Backend/
      dockerfile: Dockerfile
    container_name: sendero_app
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/prubb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_APPLICATION_NAME: sendero
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
